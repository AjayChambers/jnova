#ifndef TEST_JSON_PATH
#define TEST_JSON_PATH ""  // Satisfies Intellisense
#endif

#include <gtest/gtest.h>

#include <format>
#include <jsonbuffer.hpp>

using namespace std;


/*
 *==========================================================*
 * [SUITE A | TEST 00]
 *--------------------------------*
 * Suite-A: 'JsonBuffer Suite'
 * Test-00: 'Read Test'
 * Description: "Tests JBuff::setFilepath()."
 *==========================================================*/
TEST(SxA_JsonBuffer, T00_setPathTest)
{
    JNOVA::JsonBuffer jbuff_T00;

    jbuff_T00.setFilepath(TEST_JSON_PATH);

    string actualJsonPath = TEST_JSON_PATH;

    EXPECT_EQ(actualJsonPath, jbuff_T00.getPath());
}



/*
 *==========================================================*
 * [SUITE A | TEST 01]
 *--------------------------------*
 * Suite-A: 'JsonBuffer Suite'
 * Test-01: 'Read Test'
 * Desc: "Tests JBuff::read()."
 *==========================================================*/
TEST(SxA_JsonBuffer, T01_readFuncTest)
{
    const std::string actualJson =
      "{\n"
      "  \"name\": \"JNOVA\",\n"
      "  \"value\": 2025,\n"
      "  \"nested\": { \"true\": true }\n"
      "}\n";

    JNOVA::JsonBuffer jbuff_T01;

    jbuff_T01.setFilepath(TEST_JSON_PATH);
    jbuff_T01.read();

    EXPECT_EQ(actualJson, jbuff_T01.getData());
}








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/

TEST(SxA_JsonBuffer, T02_ReadOperTest)
{
    const std::string actualJson =
      "{\n"
      "  \"name\": \"JNOVA\",\n"
      "  \"value\": 2025,\n"
      "  \"nested\": { \"true\": true }\n"
      "}\n";

    JNOVA::JsonBuffer jbuff_T02;

    fs::path jsonFilepath = TEST_JSON_PATH;

    jsonFilepath >> jbuff_T02;

    clog << format(
      "\n\n[LOG]: Printing jbuff.getData()\n\n{}\n\n", jbuff_T02.getData()
    );


    EXPECT_EQ(actualJson, jbuff_T02.getData());
}










/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////








/*




*==========================================================*
* [SUITE A | TEST ??]
*--------------------------------*
* Suite-A: 'JsonBuffer Suite'
* Test-0?: '??'
* Desc: "????????"
*==========================================================*/


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// TEST(SxA_JsonBuffer, ?????????)
/// {
///     const std::string actualJson =
///       "{\n"
///       "  \"name\": \"JNOVA\",\n"
///       "  \"value\": 2025,\n"
///       "  \"nested\": { \"true\": true }\n"
///       "}\n";
///
///     JNOVA::JsonBuffer jbuff_T01;
///
///     EXPECT_EQ(______???, _______???);
/// }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////